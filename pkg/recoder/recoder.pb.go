// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: recoder.proto

// protoc --go_out=plugins=grpc:. *.proto

package recoder

import (
	"context"
	"reflect"
	"sync"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StartRecodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestAddr   string `protobuf:"bytes,1,opt,name=destAddr,proto3" json:"destAddr,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Channels   uint32 `protobuf:"varint,3,opt,name=channels,proto3" json:"channels,omitempty"`
	Rate       uint32 `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *StartRecodeRequest) Reset() {
	*x = StartRecodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recoder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecodeRequest) ProtoMessage() {}

func (x *StartRecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recoder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecodeRequest.ProtoReflect.Descriptor instead.
func (*StartRecodeRequest) Descriptor() ([]byte, []int) {
	return file_recoder_proto_rawDescGZIP(), []int{0}
}

func (x *StartRecodeRequest) GetDestAddr() string {
	if x != nil {
		return x.DestAddr
	}
	return ""
}

func (x *StartRecodeRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *StartRecodeRequest) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *StartRecodeRequest) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type StartRecodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartRecodeResponse) Reset() {
	*x = StartRecodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recoder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecodeResponse) ProtoMessage() {}

func (x *StartRecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recoder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecodeResponse.ProtoReflect.Descriptor instead.
func (*StartRecodeResponse) Descriptor() ([]byte, []int) {
	return file_recoder_proto_rawDescGZIP(), []int{1}
}

type StopRecodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestAddr string `protobuf:"bytes,1,opt,name=destAddr,proto3" json:"destAddr,omitempty"`
}

func (x *StopRecodeRequest) Reset() {
	*x = StopRecodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recoder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRecodeRequest) ProtoMessage() {}

func (x *StopRecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recoder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRecodeRequest.ProtoReflect.Descriptor instead.
func (*StopRecodeRequest) Descriptor() ([]byte, []int) {
	return file_recoder_proto_rawDescGZIP(), []int{2}
}

func (x *StopRecodeRequest) GetDestAddr() string {
	if x != nil {
		return x.DestAddr
	}
	return ""
}

type StopRecodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopRecodeResponse) Reset() {
	*x = StopRecodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recoder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRecodeResponse) ProtoMessage() {}

func (x *StopRecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recoder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRecodeResponse.ProtoReflect.Descriptor instead.
func (*StopRecodeResponse) Descriptor() ([]byte, []int) {
	return file_recoder_proto_rawDescGZIP(), []int{3}
}

var File_recoder_proto protoreflect.FileDescriptor

var file_recoder_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9e, 0x01, 0x0a, 0x07, 0x52, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_recoder_proto_rawDescOnce sync.Once
	file_recoder_proto_rawDescData = file_recoder_proto_rawDesc
)

func file_recoder_proto_rawDescGZIP() []byte {
	file_recoder_proto_rawDescOnce.Do(func() {
		file_recoder_proto_rawDescData = protoimpl.X.CompressGZIP(file_recoder_proto_rawDescData)
	})
	return file_recoder_proto_rawDescData
}

var file_recoder_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_recoder_proto_goTypes = []interface{}{
	(*StartRecodeRequest)(nil),  // 0: recoder.StartRecodeRequest
	(*StartRecodeResponse)(nil), // 1: recoder.StartRecodeResponse
	(*StopRecodeRequest)(nil),   // 2: recoder.StopRecodeRequest
	(*StopRecodeResponse)(nil),  // 3: recoder.StopRecodeResponse
}
var file_recoder_proto_depIdxs = []int32{
	0, // 0: recoder.Recoder.StartRecode:input_type -> recoder.StartRecodeRequest
	2, // 1: recoder.Recoder.StopRecode:input_type -> recoder.StopRecodeRequest
	1, // 2: recoder.Recoder.StartRecode:output_type -> recoder.StartRecodeResponse
	3, // 3: recoder.Recoder.StopRecode:output_type -> recoder.StopRecodeResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_recoder_proto_init() }
func file_recoder_proto_init() {
	if File_recoder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recoder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRecodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recoder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRecodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recoder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRecodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recoder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRecodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recoder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recoder_proto_goTypes,
		DependencyIndexes: file_recoder_proto_depIdxs,
		MessageInfos:      file_recoder_proto_msgTypes,
	}.Build()
	File_recoder_proto = out.File
	file_recoder_proto_rawDesc = nil
	file_recoder_proto_goTypes = nil
	file_recoder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecoderClient is the client API for Recoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecoderClient interface {
	StartRecode(ctx context.Context, in *StartRecodeRequest, opts ...grpc.CallOption) (*StartRecodeResponse, error)
	StopRecode(ctx context.Context, in *StopRecodeRequest, opts ...grpc.CallOption) (*StopRecodeResponse, error)
}

type recoderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecoderClient(cc grpc.ClientConnInterface) RecoderClient {
	return &recoderClient{cc}
}

func (c *recoderClient) StartRecode(ctx context.Context, in *StartRecodeRequest, opts ...grpc.CallOption) (*StartRecodeResponse, error) {
	out := new(StartRecodeResponse)
	err := c.cc.Invoke(ctx, "/recoder.Recoder/StartRecode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recoderClient) StopRecode(ctx context.Context, in *StopRecodeRequest, opts ...grpc.CallOption) (*StopRecodeResponse, error) {
	out := new(StopRecodeResponse)
	err := c.cc.Invoke(ctx, "/recoder.Recoder/StopRecode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecoderServer is the server API for Recoder service.
type RecoderServer interface {
	StartRecode(context.Context, *StartRecodeRequest) (*StartRecodeResponse, error)
	StopRecode(context.Context, *StopRecodeRequest) (*StopRecodeResponse, error)
}

// UnimplementedRecoderServer can be embedded to have forward compatible implementations.
type UnimplementedRecoderServer struct {
}

func (*UnimplementedRecoderServer) StartRecode(context.Context, *StartRecodeRequest) (*StartRecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecode not implemented")
}
func (*UnimplementedRecoderServer) StopRecode(context.Context, *StopRecodeRequest) (*StopRecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecode not implemented")
}

func RegisterRecoderServer(s *grpc.Server, srv RecoderServer) {
	s.RegisterService(&_Recoder_serviceDesc, srv)
}

func _Recoder_StartRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoderServer).StartRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recoder.Recoder/StartRecode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoderServer).StartRecode(ctx, req.(*StartRecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recoder_StopRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoderServer).StopRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recoder.Recoder/StopRecode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoderServer).StopRecode(ctx, req.(*StopRecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recoder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recoder.Recoder",
	HandlerType: (*RecoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRecode",
			Handler:    _Recoder_StartRecode_Handler,
		},
		{
			MethodName: "StopRecode",
			Handler:    _Recoder_StopRecode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recoder.proto",
}
