// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: recorder.proto

// protoc --go_out=plugins=grpc:. *.proto

package recorder

import (
	"context"
	"reflect"
	"sync"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StartSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Channels   uint32 `protobuf:"varint,2,opt,name=channels,proto3" json:"channels,omitempty"`
	Rate       uint32 `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
	DestAddr   string `protobuf:"bytes,4,opt,name=destAddr,proto3" json:"destAddr,omitempty"`
}

func (x *StartSendRequest) Reset() {
	*x = StartSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSendRequest) ProtoMessage() {}

func (x *StartSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSendRequest.ProtoReflect.Descriptor instead.
func (*StartSendRequest) Descriptor() ([]byte, []int) {
	return file_recorder_proto_rawDescGZIP(), []int{0}
}

func (x *StartSendRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *StartSendRequest) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *StartSendRequest) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *StartSendRequest) GetDestAddr() string {
	if x != nil {
		return x.DestAddr
	}
	return ""
}

type StartSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartSendResponse) Reset() {
	*x = StartSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSendResponse) ProtoMessage() {}

func (x *StartSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSendResponse.ProtoReflect.Descriptor instead.
func (*StartSendResponse) Descriptor() ([]byte, []int) {
	return file_recorder_proto_rawDescGZIP(), []int{1}
}

type StopSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *StopSendRequest) Reset() {
	*x = StopSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSendRequest) ProtoMessage() {}

func (x *StopSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSendRequest.ProtoReflect.Descriptor instead.
func (*StopSendRequest) Descriptor() ([]byte, []int) {
	return file_recorder_proto_rawDescGZIP(), []int{2}
}

func (x *StopSendRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type StopSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopSendResponse) Reset() {
	*x = StopSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSendResponse) ProtoMessage() {}

func (x *StopSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSendResponse.ProtoReflect.Descriptor instead.
func (*StopSendResponse) Descriptor() ([]byte, []int) {
	return file_recorder_proto_rawDescGZIP(), []int{3}
}

var File_recorder_proto protoreflect.FileDescriptor

var file_recorder_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0x15, 0x0a,
	0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xa3, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recorder_proto_rawDescOnce sync.Once
	file_recorder_proto_rawDescData = file_recorder_proto_rawDesc
)

func file_recorder_proto_rawDescGZIP() []byte {
	file_recorder_proto_rawDescOnce.Do(func() {
		file_recorder_proto_rawDescData = protoimpl.X.CompressGZIP(file_recorder_proto_rawDescData)
	})
	return file_recorder_proto_rawDescData
}

var file_recorder_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_recorder_proto_goTypes = []interface{}{
	(*StartSendRequest)(nil),  // 0: recorder.StartSendRequest
	(*StartSendResponse)(nil), // 1: recorder.StartSendResponse
	(*StopSendRequest)(nil),   // 2: recorder.StopSendRequest
	(*StopSendResponse)(nil),  // 3: recorder.StopSendResponse
}
var file_recorder_proto_depIdxs = []int32{
	0, // 0: recorder.Recorder.StartSend:input_type -> recorder.StartSendRequest
	2, // 1: recorder.Recorder.StopSend:input_type -> recorder.StopSendRequest
	1, // 2: recorder.Recorder.StartSend:output_type -> recorder.StartSendResponse
	3, // 3: recorder.Recorder.StopSend:output_type -> recorder.StopSendResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_recorder_proto_init() }
func file_recorder_proto_init() {
	if File_recorder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recorder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recorder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recorder_proto_goTypes,
		DependencyIndexes: file_recorder_proto_depIdxs,
		MessageInfos:      file_recorder_proto_msgTypes,
	}.Build()
	File_recorder_proto = out.File
	file_recorder_proto_rawDesc = nil
	file_recorder_proto_goTypes = nil
	file_recorder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecorderClient interface {
	StartSend(ctx context.Context, in *StartSendRequest, opts ...grpc.CallOption) (*StartSendResponse, error)
	StopSend(ctx context.Context, in *StopSendRequest, opts ...grpc.CallOption) (*StopSendResponse, error)
}

type recorderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderClient(cc grpc.ClientConnInterface) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) StartSend(ctx context.Context, in *StartSendRequest, opts ...grpc.CallOption) (*StartSendResponse, error) {
	out := new(StartSendResponse)
	err := c.cc.Invoke(ctx, "/recorder.Recorder/StartSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) StopSend(ctx context.Context, in *StopSendRequest, opts ...grpc.CallOption) (*StopSendResponse, error) {
	out := new(StopSendResponse)
	err := c.cc.Invoke(ctx, "/recorder.Recorder/StopSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServer is the server API for Recorder service.
type RecorderServer interface {
	StartSend(context.Context, *StartSendRequest) (*StartSendResponse, error)
	StopSend(context.Context, *StopSendRequest) (*StopSendResponse, error)
}

// UnimplementedRecorderServer can be embedded to have forward compatible implementations.
type UnimplementedRecorderServer struct {
}

func (*UnimplementedRecorderServer) StartSend(context.Context, *StartSendRequest) (*StartSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSend not implemented")
}
func (*UnimplementedRecorderServer) StopSend(context.Context, *StopSendRequest) (*StopSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSend not implemented")
}

func RegisterRecorderServer(s *grpc.Server, srv RecorderServer) {
	s.RegisterService(&_Recorder_serviceDesc, srv)
}

func _Recorder_StartSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).StartSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recorder.Recorder/StartSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).StartSend(ctx, req.(*StartSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_StopSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).StopSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recorder.Recorder/StopSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).StopSend(ctx, req.(*StopSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recorder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recorder.Recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSend",
			Handler:    _Recorder_StartSend_Handler,
		},
		{
			MethodName: "StopSend",
			Handler:    _Recorder_StopSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recorder.proto",
}
